// Generated by view binder compiler. Do not edit!
package com.example.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class GridItemLayoutBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button minusButton;

  @NonNull
  public final Button plusButton;

  @NonNull
  public final ImageView productImage;

  @NonNull
  public final TextView productName;

  @NonNull
  public final TextView productPrice;

  @NonNull
  public final TextView storeName;

  private GridItemLayoutBinding(@NonNull RelativeLayout rootView, @NonNull Button minusButton,
      @NonNull Button plusButton, @NonNull ImageView productImage, @NonNull TextView productName,
      @NonNull TextView productPrice, @NonNull TextView storeName) {
    this.rootView = rootView;
    this.minusButton = minusButton;
    this.plusButton = plusButton;
    this.productImage = productImage;
    this.productName = productName;
    this.productPrice = productPrice;
    this.storeName = storeName;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static GridItemLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static GridItemLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.grid_item_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static GridItemLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.minus_button;
      Button minusButton = ViewBindings.findChildViewById(rootView, id);
      if (minusButton == null) {
        break missingId;
      }

      id = R.id.plus_button;
      Button plusButton = ViewBindings.findChildViewById(rootView, id);
      if (plusButton == null) {
        break missingId;
      }

      id = R.id.product_image;
      ImageView productImage = ViewBindings.findChildViewById(rootView, id);
      if (productImage == null) {
        break missingId;
      }

      id = R.id.product_name;
      TextView productName = ViewBindings.findChildViewById(rootView, id);
      if (productName == null) {
        break missingId;
      }

      id = R.id.product_price;
      TextView productPrice = ViewBindings.findChildViewById(rootView, id);
      if (productPrice == null) {
        break missingId;
      }

      id = R.id.store_name;
      TextView storeName = ViewBindings.findChildViewById(rootView, id);
      if (storeName == null) {
        break missingId;
      }

      return new GridItemLayoutBinding((RelativeLayout) rootView, minusButton, plusButton,
          productImage, productName, productPrice, storeName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
